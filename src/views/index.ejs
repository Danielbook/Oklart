<!DOCTYPE html>
<html>
<% include templates/header.ejs %>
<body>
	<script>
		//Requirejs is setup
		requirejs.config({ baseUrl: './javascripts/' });

        var _graph;
        var _table;
        var _slider;
        var smhidata;

        var user = {
                gpsLocation:[0,0],
                location: 0,
                weather:"t",
                time:0
            };
		//In this function our javascripts are accesable and instanses of the included objects can be created
		requirejs(['table', 'graph', 'map', 'slide'], function (Table, Graph, Map, Slide) {
			//Stores data sent from Node.js into smhidata
			smhidata = <%-JSON.stringify(dataobject)%>;

			//Creates objects for the components
			_table = new Table(smhidata);
			_graph = new Graph(smhidata);
			_map = new Map(smhidata, user);
            _slider = new Slide(smhidata);

            _graph.initGraph(smhidata, user.location, user.weather);
			_map.initMap(user);

            initApp(user.location, user.weather, user.time);

            $( document ).ready(function() {
                /**
                 * Draws the table
                 */
                _slider.initSlider();

                $("td.toggleable").click(function(){
                    $("td").removeClass("activeCell");
                    $(this).addClass("activeCell");
                });
                /**
                 * For toggling the sidebar
                 */
                $("#menu-toggle").click(function(e) {
                    e.preventDefault();
                    $("#wrapper").toggleClass("toggled");
                });
                $( "td.location" ).on("click", function() {
                    _table.changeCurrentLocation($(this));
                });            });


		    //Autocomplete for the Searchbar
            var input = document.getElementById('CitySearch');
            var awesomplete = new Awesomplete(input, {
                minChars: 1,
                maxItems: 5,
                autoFirst: true,
                filter: Awesomplete.FILTER_STARTSWITH
            });

            //Saving the name of the cities in an array
            var list = [];
                for(i=0; i<smhidata.length; i++) {

                list[i] = smhidata[i].name;
            }

            awesomplete.list = list;

			//This function runs when the Sök button is clicked
			document.getElementById("SearchBtn").onclick = function(){
				var AdresFalt = $("#CitySearch") ;
				$.getJSON('http://nominatim.openstreetmap.org/search?format=json&q=' + AdresFalt.val(), function(data) {
					_map.updateMap(data, user);
				})
			};

			//This function runs when the Stad textfield is highlighted and a key is pressed
			$("#CitySearch").keypress(function(e){
				//If the pressed button is enter
				if(e.which == 13){
					var AdresFalt = $("#CitySearch") ;
					$.getJSON('http://nominatim.openstreetmap.org/search?format=json&q=' + AdresFalt.val(), function(data) {
						_map.updateMap(data, user);
					});
                    return false;
				}
			}); 
		});

        function initApp(idx,par,time){
            updateTime(time);
            updateTable(time,idx);
            updateLocation(idx,par,time);
        }

        function updateTime(time){
            user.time = time;
            _map.updateTime(time);
        }

        function updateTable(time, idx){
            var nearest = calculateNear(smhidata[idx].lat, smhidata[idx].lon);
            var locations = [idx,nearest[0].idx, nearest[1].idx, nearest[2].idx, nearest[3].idx];

            _table.updateTable(time, locations);
        }

        function updateLocation(idx,par,time){
            $(".toggleable").removeClass( "activeCell" );
            $("#"+idx+par).addClass( "activeCell" );
            
            $(".location").removeClass( "currentLocation" );
            $("#"+idx).addClass( "currentLocation" );

            _graph.initGraph(smhidata, idx, par);
            document.getElementById("header").innerHTML = smhidata[idx].name + " | " + smhidata[idx].timeseries[time].validTime;
        }

        

         //Used to calculate the arraySize-nr of cities closest to a position.
        function calculateNear(userLat, userLong){
            var nearestPos = [];
            var arraySize = 4;
            var firstlat = smhidata[0].lat;
            var firstlon = smhidata[0].lon;
            var arrMaxVal;
            var arrIndex;
            var result = haversine(userLat,firstlat,userLong,firstlon);

            //Loops through all cities and compares distance with havesine-function.
            for (var i=0; i<smhidata.length; i++){
                var ans = haversine(userLat,smhidata[i].lat,userLong,smhidata[i].lon);

                //If nearest-position-array is empty. Push the four first results and its index in smhidata
                if(nearestPos.length < arraySize && ans != 0){
                    nearestPos.push({res: ans, idx: i});
                }
                else if(ans < result && ans != 0){      //If the new value is close to current position than the last.

                    arrMaxVal = nearestPos[0].res;

                    //Check where the largest value is in the array and insert the new closer position in that slot.
                    for (var j = 0; j < arraySize; j++){
                        if (arrMaxVal < nearestPos[j].res){
                            arrMaxVal = nearestPos[j].res;
                            arrIndex = j;
                        }
                        else{
                            arrIndex = 0;
                        }
                    }
                    nearestPos[arrIndex] = {res: ans, idx: i};
                    result = ans;   //result will be compared to the next ans given from next smhidata-value.
                }
            }

            return nearestPos;
        }
        function haversine(lat1, lat2, lng1, lng2){
            rad = 3961; // for km use 3961, for miles use 6372.8
            deltaLat = toRad(lat2-lat1);
            deltaLng = toRad(lng2-lng1);
            lat1 = toRad(lat1);
            lat2 = toRad(lat2);
            a = Math.sin(deltaLat/2) * Math.sin(deltaLat/2) + Math.sin(deltaLng/2) * Math.sin(deltaLng/2) * Math.cos(lat1) * Math.cos(lat2);
            c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
            return  rad * c;
        }
        function toRad(Value) {
            /** Converts numeric degrees to radians */
            return Value * Math.PI / 180;
        }
        $(window).resize(function() {
            if( $(window).width() < 767 ) {
                $("#searchForm").appendTo("#sideBar");
            }
            else {
                $("#searchForm").appendTo("#topBar");
                $("#wrapper").removeClass("toggled");
            }
        });


	</script>
    <nav class="navbar navbar-custom navbar-fixed-top">
        <div class="container-fluid">
            <div class="navbar-header">
                <a class="navbar-brand">
                    <span href="#menu-toggle" id="menu-toggle" class="glyphicon glyphicon-menu-hamburger" aria-hidden="true"></span>
                </a>
            </div>
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">

                <img src="images/logoWhite.png" class="navbar-left" style="height: 50px; z-index: -1">

                <div class="navbar navbar-nav navbar-center">
                    <h4 id='header'><%= location %> | <%= time %></h4>
                </div>

                <form class="navbar-form navbar-right" id="topBar" role="search">
                    <div class="form-group" id="searchForm">
                        <input type="text" class="form-control" placeholder="Sök efter stad" id="CitySearch">
                        <button id="SearchBtn" type="button" class="btn btn-success">
                            <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </nav>
    <div id="wrapper">
        <!-- Sidebar -->
        <div id="sidebar-wrapper">
            <ul class="sidebar-nav">
                <li class="sidebar-brand">
                    <h3><%= location %> | <%= time %></h3>
                </li>
                <li>
                    <form class="navbar-form navbar-side" id="sideBar" role="search">
                        <!--<div class="form-group">-->
                            <!--<input type="text" class="form-control" placeholder="Stad" id="CitySearch">-->
                            <!--<button id="SearchBtn" type="button" class="btn btn-success">-->
                                <!--<span class="glyphicon glyphicon-search" aria-hidden="true"></span>-->
                            <!--</button>-->
                        <!--</div>-->
                    </form>
                </li>
            </ul>
        </div>
        <!-- Page Content -->
        <div id="page-content-wrapper">
            <div class="container-fluid">
                <!-- /#sidebar-wrapper -->
                <div class="row"> <!-- OUTER DIVS -->
                    <div class="col-md-6">
                        <div class="pageElement">
                            <div id="map" class="map"><div id="popup"></div></div>
                             <input id="bootslide" type="text" class="slider"
                                     data-slider-min="1"
                                     data-slider-max="73"
                                     data-slider-step="1"
                                     data-slider-value="2"
                                     data-slider-handle="square"
                                     data-slider-tooltip-position="bottom"
                              />
                            <div>
                                <output id="tid"></output>
                                <output id="dag"></output>
                            </div>
                            <b id="idag"></b>
                        </div>
                    </div>
                    <div class="col-md-6"> <!-- GRAPH AND TABLE -->
                        <div class ="row"> <!-- GRAPH -->
                            <div id="graph_div" class="graph pageElement"></div>
                        </div>
                        <div class ="row"> <!-- TABLE -->
                            <div id="table_div table-responsive" class="table pageElement">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Ort</th>
                                            <th>Väder</th>
                                            <th>Temperatur</th>
                                            <th>Nederbörd</th>
                                            <th>Vindhastighet</th>
                                        </tr>
                                    </thead>
                                    <tbody id="tableBody">
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div> <!-- GRAPH AND TABLE -->
                </div>
            </div>
        </div>
    </div>
    <!-- /#wrapper -->
</body>
</html>